!function(){"use strict";class e{constructor(e,t){let{data:s,handleCardClick:i,handleDeleteClick:r,handleLikeClick:n,userId:o}=e;this._name=s.name,this._link=s.link,this._id=s._id,this._likes=s.likes||[],this._ownerId=s.owner?s.owner._id:s.ownerId,this._userId=o,this._cardSelector=t,this._handleCardClick=i,this._handleDeleteClick=r,this._handleLikeClick=n,this._isLiked=void 0!==s.isLiked?s.isLiked:this._likes.some((e=>e._id===this._userId))}getId(){return this._id}isLiked(){return this._isLiked}updateLikes(e){this._likes=e.likes||[],this._isLiked=void 0!==e.isLiked?e.isLiked:this._likes.some((e=>e._id===this._userId)),this._renderLikes(),this._updateLikeButton()}_renderLikes(){this._likeCounter&&(this._likeCounter.textContent=this._likes.length)}_updateLikeButton(){this._likeButton&&(this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active"))}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardImage.addEventListener("click",(()=>{this._handleCardClick(this._name,this._link)}))}removeCard(){this._element.remove(),this._element=null}generateCard(){return this._element=this._getTemplate(),this._cardImage=this._element.querySelector(".card__image"),this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._likeCounter=this._element.querySelector(".card__like-count"),this._setEventListeners(),this._renderLikes(),this._updateLikeButton(),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._element.querySelector(".card__title").textContent=this._name,this._element}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e,t){const s=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}checkButtonState(){this._toggleButtonState()}}class s{constructor(e,t){let{items:s,renderer:i}=e;this._items=Array.isArray(s)?s:[],this._renderer=i,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{e&&"object"==typeof e?this._renderer(e):console.error("Invalid item in Section:",e)}))}addItem(e){e&&this._container.prepend(e)}}class i{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()}))}}class r extends i{constructor(e,t){super(e),this._handleFormSubmit=t,this._form=this._popup.querySelector(".modal__form"),this._inputs=this._form.querySelectorAll(".modal__input"),this._submitButton=this._form.querySelector(".modal__button")}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputs.forEach((t=>{e[t.name]&&(t.value=e[t.name])}))}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)}))}resetForm(){this._form.reset(),this._formValidator&&this._formValidator.resetValidation()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButton.dataset.text||"Save"}}function n(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";return t.renderLoading(!0,s),e().then((e=>(t.close(),t.resetForm&&t.resetForm(),e))).catch((e=>{console.error(e)})).finally((()=>{t.renderLoading(!1)}))}let o,a;const l={},d=new class extends i{constructor(e){super(e),this._form=this._popup.querySelector(".modal__form"),this._submitButton=this._form.querySelector(".modal__button")}setAction(e){this._handleSubmit=e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),"function"==typeof this._handleSubmit?this._handleSubmit():console.error("No submit action set for PopupWithConfirmation")}))}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Deleting...";this._submitButton.textContent=e?t:"Yes"}}("#delete-card-modal"),_=new r("#profile__edit_modal",(function(e){n((function(){return h.setUserInfo(e).then((e=>{u.setUserInfo(e),_.resetForm()}))}),_)})),h=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s,console.log("API Base URL:",this._baseUrl)}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const s={headers:this._headers,...t},i=`${this._baseUrl}${e}`;return fetch(i,s).then(this._checkResponse)}getUserInfo(){return this._request("/users/me")}getInitialCards(){return this._request("/cards")}setUserInfo(e){let{name:t,about:s}=e;return console.log("Sending user info:",{name:t,about:s}),this._request("/users/me",{method:"PATCH",body:JSON.stringify({name:t,about:s})}).then((e=>(console.log("Received data:",e),e)))}addCard(e){let{name:t,link:s}=e;return this._request("/cards",{method:"POST",body:JSON.stringify({name:t,link:s})})}likeCard(e){return this._request(`/cards/${e}/likes`,{method:"PUT"}).then((e=>(console.log("Like card response:",e),e)))}deleteCard(e){return this._request(`/cards/${e}`,{method:"DELETE"})}unlikeCard(e){return this._request(`/cards/${e}/likes`,{method:"DELETE"}).then((e=>(console.log("Unlike card response:",e),{...e,isLiked:!1})))}updateAvatar(e){return this._request("/users/me/avatar",{method:"PATCH",body:JSON.stringify({avatar:e})})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"5db111ac-010a-455f-8b65-a9484d0efcee","Content-Type":"application/json"}}),u=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:i}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(i),this._name="",this._about="",this._avatar=""}getUserInfo(){return{name:this._name,about:this._about,avatar:this._avatar}}setUserInfo(e){let{name:t,about:s,avatar:i}=e;t&&(this._name=t),s&&(this._about=s),i&&(this._avatar=i),this.updateDOM()}updateDOM(){this._nameElement.textContent=this._name,this._jobElement.textContent=this._about,this._avatar&&(this._avatarElement.src=this._avatar)}}({nameSelector:".profile__title",jobSelector:".profile__description",avatarSelector:".profile__image"}),c=new class extends i{constructor(e){super(e),this._image=this._popup.querySelector(".modal__image"),this._caption=this._popup.querySelector(".modal__caption")}open(e,t){this._image.src=t,this._image.alt=e,this._caption.textContent=e,super.open()}}("#image_modal"),m=new r("#profile__edit_modal",(e=>{n((function(){return h.setUserInfo(e).then((e=>{u.setUserInfo(e)}))}),m)})),p=new r("#card__edit_modal",(e=>{n((function(){return h.addCard({name:e.title,link:e.url}).then((e=>{const t=f(e);return o.addItem(t),e}))}),p,"Creating...")})),v=new r("#avatar-edit-modal",(e=>{n((function(){return h.updateAvatar(e.avatar).then((e=>(u.setUserInfo(e),e)))}),v,"Saving...")}));var k;function f(t){return new e({data:{...t,ownerId:t.owner?t.owner._id:t.ownerId},handleCardClick:(e,t)=>{c.open(e,t)},handleDeleteClick:e=>{!function(e){d.setAction((()=>{n((function(){return h.deleteCard(e.getId()).then((()=>{e.removeCard()}))}),d,"Deleting...")})),d.open()}(e)},handleLikeClick:e=>{(e.isLiked()?h.unlikeCard(e.getId()):h.likeCard(e.getId())).then((t=>{e.updateLikes(t)})).catch((e=>console.error("Error updating like:",e)))},userId:a},"#card__template").generateCard()}Promise.all([h.getUserInfo(),h.getInitialCards()]).then((e=>{let[t,i]=e;u.setUserInfo(t),a=t._id,o=new s({items:i,renderer:e=>{const t=f(e);o.addItem(t)}},".cards__list"),o.renderItems()})).catch((e=>console.error(e))),document.querySelector(".profile__edit-button").addEventListener("click",(()=>{const e=u.getUserInfo();_.setInputValues(e),l["profile-form"].resetValidation(),_.open()})),document.querySelector(".profile__add-button").addEventListener("click",(()=>{l["card-form"].resetValidation(),p.open()})),document.querySelector(".profile__image").addEventListener("click",(()=>{l["avatar-form"]&&l["avatar-form"].resetValidation(),v.open()})),document.querySelector(".profile__image-container").addEventListener("click",(()=>{l["avatar-edit-form"].resetValidation(),l["avatar-edit-form"].checkButtonState(),v.open()})),k={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(k.formSelector)).forEach((e=>{const s=new t(k,e),i=e.getAttribute("name");l[i]=s,s.enableValidation()})),c.setEventListeners(),m.setEventListeners(),p.setEventListeners(),v.setEventListeners(),d.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,